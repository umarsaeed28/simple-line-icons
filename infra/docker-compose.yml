version: '3.8'

services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: room-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-password}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - room-network

  # Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: room-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-roombox}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - room-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: room-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - room-network

  # Designer Agent
  designer-agent:
    build:
      context: ../designer-agent
      dockerfile: Dockerfile
    container_name: room-designer-agent
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-password}@rabbitmq:5672
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STORAGE_BASE_URL: ${STORAGE_BASE_URL:-http://localhost:3001/storage}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - designer_logs:/app/logs
      - storage_volume:/app/storage
    networks:
      - room-network
    restart: unless-stopped

  # Data Agent
  data-agent:
    build:
      context: ../data-agent
      dockerfile: Dockerfile
    container_name: room-data-agent
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3002
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-password}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-roombox}
      REDIS_URL: redis://redis:6379
      AMAZON_ACCESS_KEY: ${AMAZON_ACCESS_KEY}
      AMAZON_SECRET_KEY: ${AMAZON_SECRET_KEY}
      AMAZON_ASSOCIATE_TAG: ${AMAZON_ASSOCIATE_TAG}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - data_logs:/app/logs
    networks:
      - room-network
    restart: unless-stopped

  # User Agent
  user-agent:
    build:
      context: ../user-agent
      dockerfile: Dockerfile
    container_name: room-user-agent
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-password}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-roombox}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STORAGE_BASE_URL: ${STORAGE_BASE_URL:-http://localhost:3003/storage}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      designer-agent:
        condition: service_started
      data-agent:
        condition: service_started
    volumes:
      - user_logs:/app/logs
      - storage_volume:/app/storage
    networks:
      - room-network
    restart: unless-stopped

  # API Gateway / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: room-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - designer-agent
      - data-agent
      - user-agent
    networks:
      - room-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: room-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - room-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: room-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - room-network
    restart: unless-stopped

  # File Storage (MinIO for S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: room-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - room-network
    restart: unless-stopped

  # Worker for background jobs
  worker:
    build:
      context: ../user-agent
      dockerfile: Dockerfile
    container_name: room-worker
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      WORKER_MODE: "true"
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-password}@rabbitmq:5672
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-roombox}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - worker_logs:/app/logs
    networks:
      - room-network
    restart: unless-stopped
    command: ["npm", "run", "worker"]

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  storage_volume:
  designer_logs:
  data_logs:
  user_logs:
  worker_logs:

networks:
  room-network:
    driver: bridge