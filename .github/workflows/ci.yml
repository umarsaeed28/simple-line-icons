name: Room-in-a-Box CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16'

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd designer-agent && npm ci
        cd ../data-agent && npm ci
        cd ../user-agent && npm ci

    - name: Run ESLint
      run: |
        cd designer-agent && npm run lint
        cd ../data-agent && npm run lint
        cd ../user-agent && npm run lint

    - name: Run TypeScript type check
      run: |
        cd designer-agent && npm run type-check
        cd ../data-agent && npm run type-check
        cd ../user-agent && npm run type-check

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd designer-agent && npm ci
        cd ../data-agent && npm ci
        cd ../user-agent && npm ci

    - name: Run Designer Agent tests
      run: cd designer-agent && npm test
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Run Data Agent tests
      run: cd data-agent && npm test
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Run User Agent tests
      run: cd user-agent && npm test

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Designer Agent image
      run: |
        cd designer-agent
        docker build -t room-in-a-box-designer-agent:${{ github.sha }} .
        docker build -t room-in-a-box-designer-agent:latest .

    - name: Build Data Agent image
      run: |
        cd data-agent
        docker build -t room-in-a-box-data-agent:${{ github.sha }} .
        docker build -t room-in-a-box-data-agent:latest .

    - name: Build User Agent image
      run: |
        cd user-agent
        docker build -t room-in-a-box-user-agent:${{ github.sha }} .
        docker build -t room-in-a-box-user-agent:latest .

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    
    services:
      postgres:
        image: pgvector/pgvector:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: room_in_a_box_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd designer-agent && npm ci
        cd ../data-agent && npm ci
        cd ../user-agent && npm ci

    - name: Wait for services
      run: |
        echo "Waiting for PostgreSQL..."
        while ! pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
        echo "Waiting for RabbitMQ..."
        while ! curl -f http://localhost:15672/api/overview; do sleep 1; done

    - name: Run database migrations
      run: |
        cd infra
        npm ci
        npm run migrate:test
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/room_in_a_box_test

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Run integration tests
      run: |
        npm run test:integration
      env:
        DESIGNER_AGENT_URL: http://localhost:3001
        DATA_AGENT_URL: http://localhost:3002
        USER_AGENT_URL: http://localhost:3003
        DATABASE_URL: postgresql://postgres:password@localhost:5432/room_in_a_box_test
        RABBITMQ_URL: amqp://admin:password@localhost:5672

    - name: Stop services
      run: docker-compose -f docker-compose.test.yml down

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply, terraform apply, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply, terraform apply, etc.

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Health check Designer Agent
      run: |
        curl -f http://${{ secrets.DESIGNER_AGENT_URL }}/health || exit 1

    - name: Health check Data Agent
      run: |
        curl -f http://${{ secrets.DATA_AGENT_URL }}/health || exit 1

    - name: Health check User Agent
      run: |
        curl -f http://${{ secrets.USER_AGENT_URL }}/health || exit 1